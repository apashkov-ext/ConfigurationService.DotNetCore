// <auto-generated />
using System;
using ConfigurationManagementSystem.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConfigurationManagementSystem.Persistence.Migrations
{
    [DbContext(typeof(ConfigurationManagementSystemContext))]
    partial class ConfigurationManagementSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConfigurationManagementSystem.Domain.Entities.ApplicationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Applications", (string)null);
                });

            modelBuilder.Entity("ConfigurationManagementSystem.Domain.Entities.ConfigurationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Configurations", (string)null);
                });

            modelBuilder.Entity("ConfigurationManagementSystem.Domain.Entities.OptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OptionGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OptionGroupId");

                    b.ToTable("Options", (string)null);
                });

            modelBuilder.Entity("ConfigurationManagementSystem.Domain.Entities.OptionGroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("ParentId");

                    b.ToTable("OptionGroups", (string)null);
                });

            modelBuilder.Entity("ConfigurationManagementSystem.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ConfigurationManagementSystem.Domain.Entities.ApplicationEntity", b =>
                {
                    b.OwnsOne("ConfigurationManagementSystem.Domain.ValueObjects.ApiKey", "ApiKey", b1 =>
                        {
                            b1.Property<Guid>("ApplicationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ApiKey");

                            b1.HasKey("ApplicationEntityId");

                            b1.ToTable("Applications");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationEntityId");
                        });

                    b.OwnsOne("ConfigurationManagementSystem.Domain.ValueObjects.ApplicationName", "Name", b1 =>
                        {
                            b1.Property<Guid>("ApplicationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name");

                            b1.HasKey("ApplicationEntityId");

                            b1.HasIndex("Value");

                            b1.ToTable("Applications");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationEntityId");
                        });

                    b.Navigation("ApiKey");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("ConfigurationManagementSystem.Domain.Entities.ConfigurationEntity", b =>
                {
                    b.HasOne("ConfigurationManagementSystem.Domain.Entities.ApplicationEntity", "Application")
                        .WithMany("Configurations")
                        .HasForeignKey("ApplicationId");

                    b.OwnsOne("ConfigurationManagementSystem.Domain.ConfigurationName", "Name", b1 =>
                        {
                            b1.Property<Guid>("ConfigurationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name");

                            b1.HasKey("ConfigurationEntityId");

                            b1.HasIndex("Value");

                            b1.ToTable("Configurations");

                            b1.WithOwner()
                                .HasForeignKey("ConfigurationEntityId");
                        });

                    b.Navigation("Application");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("ConfigurationManagementSystem.Domain.Entities.OptionEntity", b =>
                {
                    b.HasOne("ConfigurationManagementSystem.Domain.Entities.OptionGroupEntity", "OptionGroup")
                        .WithMany("Options")
                        .HasForeignKey("OptionGroupId");

                    b.OwnsOne("ConfigurationManagementSystem.Domain.ValueObjects.OptionName", "Name", b1 =>
                        {
                            b1.Property<Guid>("OptionEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name");

                            b1.HasKey("OptionEntityId");

                            b1.HasIndex("Value");

                            b1.ToTable("Options");

                            b1.WithOwner()
                                .HasForeignKey("OptionEntityId");
                        });

                    b.OwnsOne("ConfigurationManagementSystem.Domain.ValueObjects.OptionValue", "Value", b1 =>
                        {
                            b1.Property<Guid>("OptionEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Type")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("Type");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("Value");

                            b1.HasKey("OptionEntityId");

                            b1.ToTable("Options");

                            b1.WithOwner()
                                .HasForeignKey("OptionEntityId");
                        });

                    b.Navigation("Name");

                    b.Navigation("OptionGroup");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("ConfigurationManagementSystem.Domain.Entities.OptionGroupEntity", b =>
                {
                    b.HasOne("ConfigurationManagementSystem.Domain.Entities.ConfigurationEntity", "Configuration")
                        .WithMany("OptionGroups")
                        .HasForeignKey("ConfigurationId");

                    b.HasOne("ConfigurationManagementSystem.Domain.Entities.OptionGroupEntity", "Parent")
                        .WithMany("NestedGroups")
                        .HasForeignKey("ParentId");

                    b.OwnsOne("ConfigurationManagementSystem.Domain.ValueObjects.OptionGroupName", "Name", b1 =>
                        {
                            b1.Property<Guid>("OptionGroupEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name");

                            b1.HasKey("OptionGroupEntityId");

                            b1.HasIndex("Value");

                            b1.ToTable("OptionGroups");

                            b1.WithOwner()
                                .HasForeignKey("OptionGroupEntityId");
                        });

                    b.Navigation("Configuration");

                    b.Navigation("Name");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ConfigurationManagementSystem.Domain.Entities.UserEntity", b =>
                {
                    b.OwnsOne("ConfigurationManagementSystem.Domain.ValueObjects.HashedPassword", "PasswordHash", b1 =>
                        {
                            b1.Property<Guid>("UserEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PasswordHash");

                            b1.HasKey("UserEntityId");

                            b1.HasIndex("Value");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityId");
                        });

                    b.OwnsOne("ConfigurationManagementSystem.Domain.ValueObjects.Username", "Username", b1 =>
                        {
                            b1.Property<Guid>("UserEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Username");

                            b1.HasKey("UserEntityId");

                            b1.HasIndex("Value");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityId");
                        });

                    b.Navigation("PasswordHash");

                    b.Navigation("Username");
                });

            modelBuilder.Entity("ConfigurationManagementSystem.Domain.Entities.ApplicationEntity", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("ConfigurationManagementSystem.Domain.Entities.ConfigurationEntity", b =>
                {
                    b.Navigation("OptionGroups");
                });

            modelBuilder.Entity("ConfigurationManagementSystem.Domain.Entities.OptionGroupEntity", b =>
                {
                    b.Navigation("NestedGroups");

                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
